// Generated by CoffeeScript 1.6.1
(function () {
    var Contents;

    Contents = (function () {

        function Contents(data, fetcher) {
            var row;
            this.items = (function () {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = data.length; _i < _len; _i++) {
                    row = data[_i];
                    _results.push(new Contents.Item(row, fetcher));
                }
                return _results;
            })();
        }

        Contents.prototype.search = function (query) {
            var item, matcher, matchers, matches, _i, _j, _len, _len1, _ref;
            matchers = query ? [this.matchExact, this.matchInclude, this.matchFuzzy] : [
              function () {
                  return true;
              }
            ];
            for (_i = 0, _len = matchers.length; _i < _len; _i++) {
                matcher = matchers[_i];
                matches = [];
                _ref = this.items;
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                    item = _ref[_j];
                    if (item.trashed === 'Y') {
                        continue;
                    }
                    if (matcher.call(this, query, item.name)) {
                        matches.push(item);
                    }
                }
                if (matches.length > 0) {
                    return matches;
                }
            }
            return [];
        };

        Contents.prototype.matchExact = function (query, string) {
            return string.toLowerCase() === query.toLowerCase();
        };

        Contents.prototype.matchInclude = function (query, string) {
            return string.toLowerCase().indexOf(query.toLowerCase()) !== -1;
        };

        Contents.prototype.matchFuzzy = function (query, string) {
            return this.matchFuzzyFrom(query.toLowerCase(), string.toLowerCase(), 0, 0);
        };

        Contents.prototype.matchFuzzyFrom = function (query, string, queryIndex, stringIndex) {
            var i;
            if (queryIndex >= query.length) {
                return true;
            }
            i = string.indexOf(query.charAt(queryIndex), stringIndex);
            if (i === -1) {
                return false;
            }
            return this.matchFuzzyFrom(query, string, queryIndex + 1, i + 1);
        };

        return Contents;

    })();

    Contents.Item = (function () {

        function Item(row, fetcher) {
            this.fetcher = fetcher;
            this.uuid = row[0], this.type = row[1], this.name = row[2], this.url = row[3], this.timestamp = row[4], this.folder = row[5], this.strength = row[6], this.trashed = row[7];
        }

        Item.prototype.unlock = function (key) {
            var raw;
            if (this.decrypted) {
                return true;
            }
            raw = GibberishAES.decryptBase64UsingKey(this.detail().encrypted, GibberishAES.s2a(key));
            return this.decrypted = JSON.parse(decodeURIComponent(escape(raw)));
        };

        Item.prototype.locked = function () {
            return !this.decrypted;
        };

        Item.prototype.securityLevel = function () {
            var content = this.detail().openContents
            return !!content ? content.securityLevel : 'SL5';
        };

        Item.prototype.detail = function () {
            if (this._detail) {
                return this._detail;
            }
            return this._detail = this.fetcher(this.uuid);
        };

        return Item;

    })();

    OnePassword.Contents = Contents
}).call(this);
