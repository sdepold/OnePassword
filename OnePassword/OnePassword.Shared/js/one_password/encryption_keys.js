// Generated by CoffeeScript 1.6.1
(function () {
    var EncryptionKeys;

    EncryptionKeys = (function () {

        function EncryptionKeys(data) {
            var item, _i, _len, _ref;
            this.masterPassword = null;
            this.keys = {};
            _ref = data.list;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (data[item.level] === item.identifier) {
                    this.keys[item.level] = new EncryptionKeys.Key(item);
                }
            }
            this.keys;
        }

        EncryptionKeys.prototype.unlock = function (password) {
            var success;
            if (!this.keys.SL5) {
                return false;
            }
            success = this.keys.SL5.unlock(password);
            if (success) {
                this.masterPassword = password;
            }
            return success;
        };

        EncryptionKeys.prototype.locked = function () {
            return !this.masterPassword;
        };

        EncryptionKeys.prototype.get = function (securityLevel) {
            var key;
            if (this.locked()) {
                throw 'database is locked';
            }
            key = this.keys[securityLevel];
            if (!key) {
                return null;
            }
            key.unlock(this.masterPassword);
            return key;
        };

        return EncryptionKeys;

    })();

    EncryptionKeys.Key = (function () {

        function Key(data) {
            var name, value;
            for (name in data) {
                value = data[name];
                this[name] = value;
            }
        }

        Key.prototype.unlock = function (password) {

            var decrypted, iterations, success, verification;
            iterations = Math.max(1000, parseInt(this.iterations || 0, 10));
            decrypted = GibberishAES.decryptUsingPBKDF2(this.data, password, iterations);
            if (!decrypted) {
                return false;
            }
            verification = GibberishAES.decryptBase64UsingKey(this.validation, GibberishAES.s2a(decrypted));
            success = verification === decrypted;
            if (success) {
                this.value = decrypted;
            }
            return success;
        };

        return Key;

    })();

    OnePassword.EncryptionKeys = EncryptionKeys

}).call(this);
